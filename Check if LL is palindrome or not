/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast != NULL && fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* fwd = NULL;

        while(curr != NULL){
            fwd = curr -> next;
            curr->next = prev;
            prev = curr;
            curr = fwd;
        }

        return prev;
    }


    bool isPalindrome(ListNode* head) {

        if (head == nullptr || head->next == nullptr)
            return true;
        
        ListNode* temp = head;
        ListNode* mid =  middleNode(head);
        ListNode* midNode = mid;
        ListNode* revLL = reverse(mid);
        while(revLL != NULL){
            if(temp->val != revLL->val){
                return false;
            }
            temp = temp->next;
            revLL = revLL->next;
        }
        return true;
    }
};
